@mixin microfix {
    &:before, &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin aspect-ratio($width, $height) {
    position: relative;

    &:before {
        content: "";
        display: block;
        width: 100%;
        padding-top:($height / $width) * 100%;
        opacity: 0;
    }

    .aspect-ratio {
        @include bg-cover;
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
    }
}

@mixin bg-cover($bg-image: null, $bg-position: null) {
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;

    @if $bg-image {
        background-image: url($bg-image);
    }

    @if $bg-position {
        background-position: $bg-position;
    }

}

@mixin position-center($orientation: null) {
    position: absolute;

    @if($orientation == 'horizontal') {
        left: 50%;
        transform: translateX(-50%);
    } @else if($orientation == 'vertical') {
        top: 50%;
        transform: translateY(-50%);
    } @else {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin triangle($size, $direction, $color) {
    content: '';
    width: 0;
    height: 0;
    display: block;
    position: absolute;

    @if($direction == 'up') {
        border-left:  $size solid transparent;
        border-right:  $size solid transparent;
        border-bottom: $size solid $color;

    } @else if($direction == 'down') {
        border-left:  $size solid transparent;
        border-right:  $size solid transparent;
        border-top: $size solid $color;

    } @else if($direction == 'left') {
        border-top:  $size solid transparent;
        border-bottom:  $size solid transparent;
        border-right: $size solid $color;

    } @else if($direction == 'right') {
        border-top:  $size solid transparent;
        border-bottom:  $size solid transparent;
        border-left: $size solid $color;
    }
}

@mixin ellipsis($truncation-boundary : 100%) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin brackets($position: null, $offset-left: -1px, $offset-top: -1px, $offset-right: -1px, $offset-bottom: -1px) {

    &:before,
    &:after {
        content: '';
        border: 1px solid $dark-gray;
        position: absolute;
        width: 8px;
        height: 8px;
    }

    &:before {
        left: $offset-left;
    }

    &:after {
        right: $offset-right;
    }

    @if($position == 'top') {

        &:before,
        &:after {
            top: $offset-top;
        }

        &:before {
            border-width: 1px 0 0 1px;
        }

        &:after {
            border-width: 1px 1px 0 0;
        }

    } @else if($position == 'bottom') {

        &:before,
        &:after {
            bottom: $offset-bottom;
        }

        &:before {
            border-width: 0 0 1px 1px;
        }

        &:after {
            border-width: 0 1px 1px 0;
        }
    }
}

@mixin border-box-sizing() {
   -moz-box-sizing:    border-box;
   -webkit-box-sizing: border-box;
    box-sizing:        border-box;
}

@mixin border-radius($radius-top, $radius-right, $radius-bottom,$radius-left){
   $top:$radius-top;
   $right:$radius-right;
   $bottom:$radius-bottom;
   $left:$radius-left;
   -moz-border-radius: $top $right $bottom $left;
   border-radius: $top $right $bottom $left;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rotate( $val: -2deg ) {
  -webkit-transform: rotate($val);
  -moz-transform: rotate($val);
  -ms-transform: rotate($val);
  -o-transform: rotate($val);
  transform: rotate($val);
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

@mixin text-box() {
    display: inline-block;
    vertical-align: bottom;
    font-weight: bold;
    padding: .22em;
    font-size: .6em;
    border: 1px black solid;
}

@mixin super-script ($content) {
    position: relative;
    margin-left: 0.3em;
    &:after {
        content: $content;
        position: absolute;
        top: .2em;
        font-size: 0.6em;
    }
}

